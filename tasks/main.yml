---
- name: Load a variable file based on the OS type, or a default if not found.
  include_vars: "{{ item }}"
  with_first_found:
    - "{{ ansible_distribution }}-{{ ansible_distribution_version }}.yml"
    - "{{ ansible_distribution }}.yml"
    - "{{ ansible_os_family }}.yml"
    - "default.yml"
  ignore_errors: true

- name: Install dependencies
  become: true
  package:
    state: present
    name: "{{ harbor_dependencies }}"
    update_cache: true

- name: Installing docker python bindings
  become: true
  pip:
    state: present
    name:
      - docker
      - pyyaml>=3.11
      - docker-compose>=1.7.0

- name: Format disk for data dir
  filesystem:
    fstype: "{{ harbor_data_fstype }}"
    dev: "{{ harbor_data_dev }}"
  when: harbor_data_dev != ""
  become: yes

- name: Mount disk for data dir
  mount:
    path: "{{ harbor_data_dir }}"
    src: "{{ harbor_data_dev }}"
    fstype: "{{ harbor_data_fstype }}"
    state: mounted
  when: harbor_data_dev != ""
  become: yes

- name: "Downloading Harbor {{ harbor_version }} (offline installer)"
  get_url: url={{ harbor_url }} dest=/tmp/harbor.tgz validate_certs=no

- name: "Creating Harbor parent directory... ({{ harbor_install_dir }})"
  file:
    path: "{{ harbor_install_dir }}"
    state: directory
    mode: o+r

- name: "Uncompressing Harbor installer to {{ harbor_install_dir }}/harbor..."
  unarchive:
    remote_src: True
    src: /tmp/harbor.tgz
    dest: "{{ harbor_install_dir }}"
    creates: "{{ harbor_install_dir }}/harbor"
  become: yes

- name: Read template file
  slurp:
    src: "{{ harbor_install_dir }}/harbor/harbor.yml.tmpl"
  register: harbor_yml_tmpl

- name: "Combine harbor config with template"
  set_fact:
    harbor_yml: "{{ harbor_yml_tmpl.content | b64decode | from_yaml | combine(harbor_config, recursive=True) |  combine(harbor_extra_config, recursive=True) | dict2items | rejectattr('key', 'in', harbor_config_reject) | items2dict }}"

- name: "Write combined config to harbor.yml"
  blockinfile:
    create: yes
    block: "{{ harbor_yml | to_nice_yaml }}"
    path: "{{ harbor_install_dir }}/harbor/harbor.yml"
  become: yes
  register: config

- name: Running Harbor installer...
  command: "./install.sh {{ harbor_installer_with }} {{ harbor_installer_extra_args }}"
  args:
    chdir: "{{ harbor_install_dir }}/harbor"
    creates: '{{ harbor_install_dir }}/harbor/harbor_install_log.txt'
  become: yes
  when: config is changed

- name: Creating projects
  uri:
    url: "{{ harbor_api_url }}/projects"
    method: post
    user: "admin"
    password: "{{ harbor_admin_password }}"
    status_code:
      - 201
      - 409 # already created
    body_format: json
    force_basic_auth: yes
    return_content: yes
    body: "{{ lookup('template', 'templates/create_project.j2') }}"
    validate_certs: "{{ harbor_validate_certs | bool }}"
  with_items: "{{ harbor_projects }}"
  register: response
  changed_when: response.status == 201

- name: Creating users
  uri:
    url: "{{ harbor_api_url }}/users"
    method: POST
    user: "admin"
    password: "{{ harbor_admin_password }}"
    status_code:
      - 201
      - 409 # already created
    body_format: json
    force_basic_auth: yes
    return_content: yes
    body: "{{ lookup('template', 'templates/create_user.j2') }}"
    validate_certs: "{{ harbor_validate_certs | bool }}"
  with_items: "{{ harbor_users }}"
  register: response
  changed_when: response.status == 201

- name: Get projects
  uri:
    url: "{{ harbor_api_url }}/projects/{{ item.project_name }}"
    method: GET
    user: "admin"
    password: "{{ harbor_admin_password }}"
    status_code:
      - 200
    force_basic_auth: yes
    validate_certs: "{{ harbor_validate_certs | bool }}"
  with_items: "{{ harbor_roles }}"
  register: projects

- name: Creating project roles
  vars:
    role: "{{ item.item }}"
  uri:
    url: "{{ harbor_api_url }}/projects/{{ item.json.project_id }}/members"
    method: POST
    user: "admin"
    password: "{{ harbor_admin_password }}"
    status_code:
      - 201
      - 409 # already created
    body_format: json
    force_basic_auth: yes
    return_content: yes
    body: "{{ lookup('template', 'templates/create_role.j2') }}"
    validate_certs: "{{ harbor_validate_certs | bool }}"
  loop: "{{ projects.results }}"
  loop_control:
    label: "{{ item.item }}"
  register: response
  changed_when: response.status == 201
